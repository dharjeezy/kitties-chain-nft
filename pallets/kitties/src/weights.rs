
//! Autogenerated weights for `pallet_kitties`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-03-10, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("dev"), DB CACHE: 128

// Executed Command:
// ./target/release/node-kitties
// benchmark
// --chain=dev
// --steps=50
// --repeat=20
// --pallet=pallet_kitties
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --output=.


#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn create_kitty() -> Weight;
	fn set_price() -> Weight;
	fn transfer() -> Weight;
}
/// Weight functions for `pallet_kitties`.
pub struct KittiesWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_kitties::WeightInfo for WeightInfo<T> {
	// Storage: RandomnessCollectiveFlip RandomMaterial (r:1 w:0)
	// Storage: SubstrateKitties KittyCnt (r:1 w:1)
	// Storage: SubstrateKitties KittiesOwned (r:1 w:1)
	// Storage: SubstrateKitties Kitties (r:0 w:1)
	fn create_kitty() -> Weight {
		(56_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	// Storage: SubstrateKitties Kitties (r:1 w:1)
	fn set_price() -> Weight {
		(33_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: SubstrateKitties Kitties (r:1 w:1)
	// Storage: SubstrateKitties KittiesOwned (r:2 w:2)
	fn transfer() -> Weight {
		(52_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
}

impl WeightInfo for () {
	fn create_kitty() -> Weight { 0 }
	fn set_price() -> Weight { 0 }
	fn transfer() -> Weight { 0 }
}

